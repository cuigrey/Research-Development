<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Designer.cs" #>
<#
	var resourceFile = this.Host.ResolvePath("strings\\en-US\\Resources.resw");
	XDocument document = XDocument.Load(resourceFile);

	string suggestedNamespace = (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
#>

// This output was generated based on a format similar to the one used by resx resource generation.
namespace <#= suggestedNamespace #>
{
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like or ResGen Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Security.SecuritySafeCriticalAttribute()]
    internal class Resources
    {

        private static global::Windows.ApplicationModel.Resources.ResourceLoader resourceMan;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Using resx generated code as template")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::Windows.ApplicationModel.Resources.ResourceLoader ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    global::Windows.ApplicationModel.Resources.ResourceLoader temp = new global::Windows.ApplicationModel.Resources.ResourceLoader("Microsoft.Practices.Unity.RegistrationByConvention/Resources");
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
		<#
			var resourceNames = document.Descendants("data")
					.Select(d => new {	Name = d.Attribute("name").Value, 
										Message= d.Value} );
			foreach(var entry in resourceNames)
			{
		#>

		/// <summary>
		/// <#= CommentizeMessage(entry.Message) #>
		/// </summary>
        internal static string <#= entry.Name #>
        {
            get
            {
                return ResourceManager.GetString("<#= entry.Name #>");
            }
        }
	<# } #>}
}

<#+
  const int MAX_COMMENT_LENGTH = 80;

  private string CommentizeMessage(string message)
  {
	var scrubbed = Regex.Replace(message, "[\r,\n]","");
	var xmlConverted = System.Security.SecurityElement.Escape(scrubbed);  // quick and non-obvious way to xml escape a string for most characters.
	
	if (xmlConverted.Length > MAX_COMMENT_LENGTH) {
		xmlConverted = xmlConverted.Substring(0,MAX_COMMENT_LENGTH-4) + "...";
	}
	
	return xmlConverted.Trim();
  }
#>

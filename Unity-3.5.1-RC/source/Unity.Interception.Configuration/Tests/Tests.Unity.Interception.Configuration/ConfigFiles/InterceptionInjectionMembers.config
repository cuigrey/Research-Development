<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>

  <unity>
    <namespace name="Microsoft.Practices.Unity.TestSupport" />
    <assembly name="Unity.TestSupport" />
    
    <alias alias="IServiceProvider" type="System.IServiceProvider, mscorlib" />
    <alias alias="IComponent" type="System.ComponentModel.IComponent, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    <alias alias="Interceptable"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.Tests.TestObjects.Interceptable, Unity.Interception.Configuration.Tests" />

    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />

    <!--<container name="CanConfigureInterceptorThroughConfigurationFile">
      <extensions>
        <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
      </extensions>
      <types>
        <type type="Interceptable">
          <typeConfig>
            <add
              elementType="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement, Microsoft.Practices.Unity.Interception.Configuration"
              type="virtualMethod"/>
          </typeConfig>
        </type>
      </types>
    </container>-->

    <container name="configuringInterceptorThroughConfigurationFile">
      <extension type="Interception" />

      <register type="Interceptable">
        <interceptor type="VirtualMethodInterceptor" />
      </register>    
    </container>

    <!--<container name="CanConfigureAdditionalInterfaceThroughConfigurationFile">
      <extensions>
        <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
      </extensions>
      <types>
        <type type="Interceptable">
          <typeConfig>
            <add
              elementType="Microsoft.Practices.Unity.InterceptionExtension.Configuration.AdditionalInterfaceElement, Microsoft.Practices.Unity.Interception.Configuration"
              type="System.IServiceProvider, mscorlib"/>
          </typeConfig>
        </type>
      </types>
    </container>-->

    <container name="configuringAdditionalInterfaceThroughConfigurationFile">
      <extension type="Interception" />
      <register type="Interceptable">
        <addInterface type="IServiceProvider" />
        <addInterface type="IComponent" />
      </register>
    </container>

    <!--<container name="CanConfigureInterceptionBehaviorWithTypeThroughConfigurationFile">
      <extensions>
        <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
      </extensions>
      <types>
        <type type="Interceptable">
          <typeConfig>
            <add
              elementType="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement, Microsoft.Practices.Unity.Interception.Configuration"
              behaviorType="GlobalCountInterceptionBehavior"/>
          </typeConfig>
        </type>
      </types>
    </container>-->

    <container name="configuringInterceptionBehaviorWithTypeThroughConfigurationFile">
      <extension type="Interception" />
      <register type="Interceptable">
        <interceptionBehavior type="GlobalCountInterceptionBehavior" />
        <policyInjection />
      </register>
    </container>

    <!--<container name="CanConfigureInterceptionBehaviorWithDescriptorTypeThroughConfigurationFile">
      <extensions>
        <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
      </extensions>
      <types>
        <type type="Interceptable">
          <typeConfig>
            <add
              elementType="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement, Microsoft.Practices.Unity.Interception.Configuration"
              behaviorType="GlobalCountInterceptionBehavior" behaviorName="fixed"/>
          </typeConfig>
        </type>
        <type type="GlobalCountInterceptionBehavior" name="fixed">
          <typeConfig>
            <constructor>
              <param name="callHandlerName" parameterType="string">
                <value value="fixed"/>
              </param>
            </constructor>
          </typeConfig>
        </type>
      </types>
    </container>-->

    <container name="canConfigureNamedBehavior">
      <extension type="Interception" />

      <register type="Interceptable">
        <interceptionBehavior type="GlobalCountInterceptionBehavior" name="fixed" />
      </register>

      <register type="GlobalCountInterceptionBehavior" name="fixed">
        <constructor>
          <param name="callHandlerName" value="fixed" />
        </constructor>
      </register>
    </container>

    <!--<container name="CanConfigureInterceptionBehaviorWithResolvedInstanceThroughConfigurationFile">
      <extensions>
        <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
      </extensions>
      <types>
        <type type="Interceptable">
          <typeConfig>
            <add
              elementType="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement, Microsoft.Practices.Unity.Interception.Configuration"
              behaviorName="call count"/>
          </typeConfig>
        </type>
      </types>
    </container>-->
    
    <container name="canConfigureBehaviorWithNameOnly">
      <extension type="Interception" />
      <register type="Interceptable">
        <interceptionBehavior name="call count"/>
      </register>
    </container>

    <container name="configuringDefaultInterceptor">
      <extension type="Interception" />

      <register type="Wrappable">
        <interceptor type="TransparentProxyInterceptor" isDefaultForType="true" />
        <interceptionBehavior type="PolicyInjectionBehavior" isDefaultForType="true" />
      </register>
    </container>

    <container name="addingInterfacesImplicitlyThroughBehavior">
      <extension type="Interception" />
      <register type="Interceptable">
        <interceptor type="TransparentProxyInterceptor" />
        <interceptionBehavior type="AdditionalInterfaceBehavior" />
      </register>

      <register type="AdditionalInterfaceBehavior">
        <constructor />
      </register>
    </container>

    <container name="addingInterfacesExplicitlyWithBehavior">
      <extension type="Interception" />
      <register type="Interceptable">
        <interceptor type="TransparentProxyInterceptor" />
        <interceptionBehavior type="AdditionalInterfaceBehavior" />
        <addInterface type="IAdditionalInterface" />
      </register>

      <register type="AdditionalInterfaceBehavior">
        <constructor>
          <param name="implicitlyAddInterface" value="false" />
        </constructor>
      </register>
    </container>

    <container name="multipleBehaviorsOnOneRegistration">
      <extension type="Interception" />
      <register type="Interceptable">
        <interceptor type="TransparentProxyInterceptor"/>
        <interceptionBehavior name="addInterface" />
        <interceptionBehavior name="fixed" />
      </register>

      <register type="IInterceptionBehavior" mapTo="AdditionalInterfaceBehavior" name="addInterface">
        <constructor />
      </register>
      
      <register type="IInterceptionBehavior" mapTo="CallCountInterceptionBehavior" name="fixed">
        <lifetime type="singleton" />
      </register>
      
    </container>
    
  </unity>
</configuration>

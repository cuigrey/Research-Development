<?xml version="1.0" encoding="utf-8" ?>

<!--
Copyright (c) Microsoft Corporation. All rights reserved. See License.txt in the project root for license information.
-->
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>

  <unity>
    <typeAliases>
      <typeAlias alias="IHaveManyGenericTypes" type="Unity.Tests.Generics.IHaveManyGenericTypes`4, Unity.Tests" />
      <typeAlias alias="IHaveAGenericType" type="Unity.Tests.Generics.IHaveAGenericType`1, Unity.Tests" />
      <typeAlias alias="HaveAGenericType" type="Unity.Tests.Generics.HaveAGenericType`1, Unity.Tests" />
      <typeAlias alias="HaveManyGenericTypes" type="Unity.Tests.Generics.HaveManyGenericTypes`4, Unity.Tests" />
      <typeAlias alias="IHaveManyGenericTypesClosed" type="Unity.Tests.Generics.IHaveManyGenericTypesClosed, Unity.Tests" />
      <typeAlias alias="HaveManyGenericTypesClosed" type="Unity.Tests.Generics.HaveManyGenericTypesClosed, Unity.Tests" />
      <typeAlias alias="GenericA" type="Unity.Tests.Generics.GenericA, Unity.Tests" />
      <typeAlias alias="GenericB" type="Unity.Tests.Generics.GenericD, Unity.Tests" />
      <typeAlias alias="GenericC" type="Unity.Tests.Generics.GenericD, Unity.Tests" />
      <typeAlias alias="GenericD" type="Unity.Tests.Generics.GenericD, Unity.Tests" />
      <typeAlias alias="IGenLogger" type="Unity.Tests.Generics.IGenLogger, Unity.Tests" />
      <typeAlias alias="GenMockLogger" type="Unity.Tests.Generics.GenMockLogger, Unity.Tests" />
      <typeAlias alias="GenSpecialLogger" type="Unity.Tests.Generics.GenSpecialLogger, Unity.Tests" />
      <typeAlias alias="ClassWithConstMethodandProperty" type="Unity.Tests.Generics.ClassWithConstMethodandProperty`1, Unity.Tests" />

    </typeAliases>
    <containers>
      <container name="VerifyCanCreateAGenericTypeThroughTheDefaultCtor">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes" />
        </types>
      </container>

      <container name="VerifyValueElementParameterType">

        <register type="IHaveAGenericType[int]" mapTo="HaveAGenericType[int]">

          <constructor>
            <param name="t1Value" type="string">
              <value value="1"></value>
            </param>
          </constructor>
          
        </register>

      </container>

      <container name="VerifyValueElementWithoutParameterType">

        <register type="IHaveAGenericType[int]" mapTo="HaveAGenericType[int]">

          <constructor>
            <param name="t1Value">
              <value value="1"></value>
            </param>
          </constructor>


        </register>

      </container>
      
      <container name="VerifyCanCreateAGenericTypeThroughASpecifiedGenericConstructor1">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t1Value">
                <dependency />
              </param>
            </constructor>

          </type>
        </types>
      </container>

      <container name="VerifyCanCreateAGenericTypeThroughASpecifiedGenericConstructor2">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t2Value">
                <dependency />
              </param>
            </constructor>

          </type>
        </types>
      </container>

      <container name="VerifyCanCreateAGenericTypeThroughASpecifiedGenericConstructor3">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t2Value">
                <dependency/>
              </param>
              <param name="t1Value">
                <dependency />
              </param>
            </constructor>

          </type>
        </types>
      </container>


      <container name="VerifyCanCreateAGenericTypeFailsThroughASpecifiedGenericConstructorWithInvalidParameterOrder">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t1Value">
                <dependency type="GenericA"/>
              </param>
              <param name="t2Value">
                <dependency type="GenericB"/>
              </param>
            </constructor>

          </type>
        </types>
      </container>

      <container name="VerifyCanCreateAGenericTypeFailsThroughASpecifiedGenericConstructorWithInvalidParameterOrder">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t1Value">
                <dependency type="GenericA"/>
              </param>
              <param name="t2Value">
                <dependency type="GenericB"/>
              </param>
            </constructor>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeFailsThroughASpecifiedGenericConstructorWithInvalidGenericTypeName">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor>
              <param name="t1Value">
                <dependency type="GenericA"/>
              </param>
              <param name="t2Value">
                <dependency type="GenericB"/>
              </param>
            </constructor>

          </type>
        </types>
      </container>

      <container name="VerifyCanCreateAGenericTypeWithAConfiguredDependencyProperty1">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">
            <constructor></constructor>
            <property name="PropT3" >

            </property>
          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeWithAConfiguredDependencyProperty2">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <property name="PropT3"/>
            <property name="PropT4"/>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeWithAInjectionMethod1">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <method name="SetMultiple">
              <param name="t4Value">
                <dependency />
              </param>
              <param name="t3Value">
                <dependency />
              </param>
            </method>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeFailsWithAInjectionMethodAndInvalidParamterOrder">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <method name="SetMultiple">
              <param name="t3Value">
                <dependency />
              </param>
              <param name="t4Value">
                <dependency />
              </param>
            </method>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeWithAInjectionMethod2">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <method name="Set">
              <param name="t4Value">
                <dependency />
              </param>
            </method>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeWithAInjectionMethod3">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <method name="Set">
              <param name="t4Value" >
                <dependency />
              </param>
            </method>
            <method name="Set">
              <param name="t1Value" >
                <dependency />
              </param>
            </method>

          </type>
        </types>
      </container>

      <container name="VerifyCanCreateAGenericTypeWithAInjectionMethod3_Closed">
        <types>
          <type type="IHaveManyGenericTypesClosed" mapTo="HaveManyGenericTypesClosed">

            <constructor/>
            <method name="Set">
              <param name="t4Value">
                <dependency />
              </param>
            </method>
            <method name="Set">
              <param name="t1Value" >
                <dependency />
              </param>
            </method>

          </type>
        </types>
      </container>

      <container name="MethodNoNullDependecyElementThrowException">
        <types>
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <method name="SetValue">
              <param name="special" >
                <!--<dependency/>-->
              </param>
            </method>

          </type>
        </types>
      </container>


      <container name="PropertyNoNullDependecyElement">
        <types>
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <property name="Value">
              <dependency name="special"/>
            </property>

          </type>
        </types>
      </container>
      
      <container name="VerifyCanCreateAGenericTypeFailsWithAInjectionMethodButWrongParameterName">
        <types>
          <type type="IHaveManyGenericTypes" mapTo="HaveManyGenericTypes">

            <constructor/>
            <method name="Set">
              <param name="t4Vasdfasdfalue">
                <dependency type="GenericD"/>
              </param>
            </method>

          </type>
        </types>
      </container>

      <container name="ConstDependecyElement">
        <types>
          <type type="IGenLogger" mapTo="GenMockLogger" />
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor>
              <param name="value">
                <dependency />
              </param>
            </constructor>

          </type>
        </types>
      </container>
      
      <container name="MethodNoNullDependecyElement">
        <types>
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <method name="SetValue">
              <param name="value">
                <dependency name="special"/>
              </param>
            </method>

          </type>
        </types>
      </container>
      
      <container name="PropertyDependecyElement">
        <types>
          <type type="IGenLogger" mapTo="GenMockLogger" />
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <property name="Value" />

          </type>
        </types>
      </container>
      
      <container name="PropertyNoNullDependecyElementThrowException">
        <types>
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <property name="Value" >
            </property>

          </type>
        </types>
      </container>
      
      <container name="MethodDependecyElement">
        <types>
          <type type="IGenLogger" mapTo="GenMockLogger" />
          <type type="IGenLogger" mapTo="GenSpecialLogger" name="special" />
          <type type="ClassWithConstMethodandProperty">

            <constructor/>
            <method name="SetValue">
              <param name="value">
                <dependency name="special"/>
              </param>
            </method>

          </type>
        </types>
      </container>

    </containers>
  </unity>
</configuration>

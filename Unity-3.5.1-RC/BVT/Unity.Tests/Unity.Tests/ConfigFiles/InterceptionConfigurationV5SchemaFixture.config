<?xml version="1.0" encoding="utf-8" ?>

<!--
Copyright (c) Microsoft Corporation. All rights reserved. See License.txt in the project root for license information.
-->
<configuration>
	<configSections>
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
	</configSections>

	<unity>
		<namespace name="Unity.Tests.TestObjects" />
		<namespace name="Unity.Tests.InterceptionExtension" />
		<namespace name="Microsoft.Practices.Unity.InterceptionExtension" />
		<assembly name="Unity.Tests" />
    
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
    <containers>
			<container name="CanUseInterfaceInterceptorThroughConfiguration">
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour1">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour1" />
						</param>
					</constructor>
				</register>
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="NonExistentInterceptionMechanismSpecifiedThrowsValidException">
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour1">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour1" />
						</param>
					</constructor>
				</register>
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<interceptor type="DoNothingInterceptionBehavior" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="NonExistentBehaviourSpecifiedThrowsValidException">
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>


			<container name="CanUseTransparentProxyInterceptionThroughConfiguration">
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour1">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour1" />
						</param>
					</constructor>
				</register>
				<register type="ImplementsMBRO">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="CanUseVirtualMethodInterceptionThroughConfiguration">
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour1">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour1" />
						</param>
					</constructor>
				</register>
				<register type="HasVirtualMethods">
					<interceptor type="VirtualMethodInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="CanUseInterfaceInterceptionAdditionalInterfacesThroughConfiguration">
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<addInterface type="IAdditionalInterface" />
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior type="BehavourForAdditionalInterface" />
				</register>

				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="CanConfigureMultipleAdditionalInterfacesThroughConfiguration">
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<addInterface type="IAdditionalInterface" />
					<addInterface type="IAdditionalInterface1" />
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior type="BehavourForAdditionalInterface" />
				</register>

				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="CanUseTransparentProxyInterceptionWithAdditionalInterfacesThroughConfiguration">
				<register type="ImplementsMBRO">
					<addInterface type="IAdditionalInterface" />
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior type="BehavourForAdditionalInterface" />
				</register>

				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="CanUseVirtualMethodInterceptionWithAdditionalInterfacesThroughConfiguration">
				<register type="HasVirtualMethods">
					<addInterface type="IAdditionalInterface" />
					<interceptor type="VirtualMethodInterceptor" />
					<interceptionBehavior type="BehavourForAdditionalInterface" />
				</register>

				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="CanMixDifferentInterceptionMechanismsForSameContainerConfiguration">
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour1">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour1" />
						</param>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour2">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour2" />
						</param>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="DoNothingInterceptionBehavior" name="behaviour3">
					<constructor>
						<param name="behaviourName">
							<value value="behaviour3" />
						</param>
					</constructor>
				</register>
				<register type="HasVirtualMethods">
					<interceptor type="VirtualMethodInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="IInterfaceA" mapTo="ImplementsInterface">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour2" />
				</register>
				<register type="ImplementsMBRO">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour3" />
				</register>


				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="CanInterceptWithBehaviourChainInConfiguration">

				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="Abehaviour">

					<constructor>

					</constructor>

				</register>

				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="Bbehaviour">

					<constructor>

					</constructor>

				</register>

				<register type="IInterceptionBehavior" mapTo="CInterceptionBehavior" name="Cbehaviour">

					<constructor>

					</constructor>

				</register>

				<register type="IInterfaceB" mapTo="ImplementsInterfaceB" >

					<interceptor type="TransparentProxyInterceptor" />

					<interceptionBehavior name="Cbehaviour" />

					<interceptionBehavior name="Abehaviour" />

					<interceptionBehavior name="Bbehaviour" />

				</register>

				<extensions>

					<add type="Interception" />

				</extensions>

			</container>



			<container name="CanInterceptSameTypeWithDifferentNamesWithDifferentBehavioursForSameContainerConfiguration">
				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="behaviour1">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="behaviour2">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="CInterceptionBehavior" name="behaviour3">
					<constructor>
					</constructor>
				</register>

				<register type="IInterfaceB" mapTo="ImplementsInterfaceB" name="UsingBehaviourA">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="IInterfaceB" mapTo="ImplementsInterfaceB" name="UsingBehaviourB">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour2" />
				</register>
				<register type="IInterfaceB" mapTo="ImplementsInterfaceB" name="UsingBehaviourC">
					<interceptor type="TransparentProxyInterceptor" />
					<interceptionBehavior name="behaviour3" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="TestDefaults">
				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="behaviour1">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="behaviour2">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="CInterceptionBehavior" name="behaviour3">
					<constructor>
					</constructor>
				</register>

				<register type="IInterfaceTest" mapTo="TestClassForMultipleInterception" >
					<interceptor type="TransparentProxyInterceptor" isDefaultForType="true"/>
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="IInterfaceTest" mapTo="TestClassForMultipleInterception" name="WithNameA">
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="TestDefaults">
				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="behaviour1">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="behaviour2">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="CInterceptionBehavior" name="behaviour3">
					<constructor>
					</constructor>
				</register>

				<register type="IInterfaceTest" mapTo="TestClassForMultipleInterception" >
					<interceptor type="TransparentProxyInterceptor" isDefaultForType="true"/>
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="IInterfaceTest" mapTo="TestClassForMultipleInterception" name="WithNameA">
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="TestDefaultNotAppliedForDifferentInterfaceImplementations">
				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="behaviour1">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="behaviour2">
					<constructor>
					</constructor>
				</register>



				<register type="IInterfaceB" mapTo="ImplementsInterfaceB" >
					<interceptor type="TransparentProxyInterceptor" isDefaultForType="true"/>
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="IInterfaceB" mapTo="NewImplementsInterfaceB" name="WithNameA">
					<interceptionBehavior name="behaviour2" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>

			<container name="OverrideDefault">
				<register type="IInterceptionBehavior" mapTo="AInterceptionBehavior" name="behaviour1">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="BInterceptionBehavior" name="behaviour2">
					<constructor>
					</constructor>
				</register>
				<register type="IInterceptionBehavior" mapTo="CInterceptionBehavior" name="behaviour3">
					<constructor>
					</constructor>
				</register>
				<register type="TestClassForMultipleInterception" >
					<interceptor type="TransparentProxyInterceptor" isDefaultForType="true"/>
					<interceptionBehavior name="behaviour1" />
				</register>
				<register type="TestClassForMultipleInterception" name="virtual" >
					<interceptor type="VirtualMethodInterceptor" />
					<interceptionBehavior name="behaviour2" />
				</register>
				<register type="TestClassForMultipleInterception" name="shouldbetransparentproxy" >
					<interceptionBehavior name="behaviour2" />
				</register>
				<register type="TestClassForMultipleInterception" name="changedbehaviourfromdefault" >
					<interceptor type="TransparentProxyInterceptor"></interceptor>
					<interceptionBehavior name="behaviour3" />
				</register>
				<extensions>
					<add type="Interception" />
				</extensions>
			</container>
			<container name="VirtualInterceptorCallHandlerBug">
				<extension type="Interception" />
				<register type="HasVirtualMethodsTest">

					<interceptor type="VirtualMethodInterceptor"></interceptor>
					<policyInjection></policyInjection>
				</register>
				<register type="IMatchingRule" name="rule1" mapTo="TagAttributeMatchingRule">
					<constructor>

						<param name="tagToMatch">
							<value value="Test" />
						</param>
					</constructor>
				</register>
				<register type="ICallHandler" name="handler1" mapTo="CustomCallHandlerUsingArguments">
				</register>

				
				<interception>
					<policy name="policyOne">
						<matchingRule name="rule1" />
						<callHandler name="handler1" />
	
						
					</policy>
				</interception>
			</container>
			<container name="VirtualInterceptorCallHandlerUsingInputOrReturnValueCollection">
				<extension type="Interception" />
				<register type="HasVirtualMethodsTest">

					<interceptor type="VirtualMethodInterceptor"></interceptor>
					<policyInjection></policyInjection>
				</register>
				<register type="IMatchingRule" name="rule1" mapTo="TagAttributeMatchingRule">
					<constructor>
						
						<param name="tagToMatch">
							<value value="Test" />
						</param>
					</constructor>
				</register>
				<register type="ICallHandler" name="handler1" mapTo="CustomCallHandlerUsingInputAndMethodReturn">
				</register>


				<interception>
					<policy name="policyOne">
						<matchingRule name="rule1" />
						<callHandler name="handler1" />


					</policy>
				</interception>
			</container>
			
		</containers>
			
		
	</unity>
</configuration>





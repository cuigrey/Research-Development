<?xml version="1.0" encoding="utf-8" ?>

<!--
Copyright (c) Microsoft Corporation. All rights reserved. See License.txt in the project root for license information.
-->
<configuration>
	<configSections>
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
	</configSections>
	<unity>
		<typeAliases>
			<typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
			<typeAlias alias="ILogger" type="Unity.Tests.TestObjects.ILogger, Unity.Tests" />
      <typeAlias alias="IService" type="Unity.Tests.TestObjects.IService, Unity.Tests" />
			<typeAlias alias="MockLogger" type="Unity.Tests.TestObjects.MockLogger, Unity.Tests" />
			<typeAlias alias="SpecialLogger" type="Unity.Tests.TestObjects.SpecialLogger, Unity.Tests" />
      <typeAlias alias="EmailService" type="Unity.Tests.TestObjects.EmailService, Unity.Tests" />
      <typeAlias alias="PropertyConstructor" type="Unity.Tests.TestObjects.ObjectUsingLogger, Unity.Tests"/>
			<typeAlias alias="DependentConstructor" type="Unity.Tests.TestObjects.ObjectWithOneConstructorDependency, Unity.Tests" />
			<typeAlias alias="TwoConstructorArgs" type="Unity.Tests.TestObjects.ObjectWithTwoConstructorParameters, Unity.Tests" />
      <typeAlias alias="MockDatabase" type="Unity.Tests.TestObjects.MockDatabase, Unity.Tests" />
      <typeAlias alias="ObjectWithInjectionMethod" type="Unity.Tests.TestObjects.ObjectWithInjectionMethod, Unity.Tests"></typeAlias>
      <typeAlias alias="generics" type="Unity.Tests.ObjectsWithGenerics, Unity.Tests"></typeAlias>
      <typeAlias alias="Igenerics" type="Unity.Tests.IGenerics, Unity.Tests"></typeAlias>
    </typeAliases>

		<namespace name="System.ComponentModel" />
		<assembly name="System, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089" />
		<containers>
			<container name="defaultConstructor">
					<register type="MockDatabase">
						<constructor></constructor>
					
					</register>
			</container>

			<container name="oneIntParameterConstructor">
				<types>
					<register type="MockDatabase">

						<constructor>
							<param name="testValue">
								<value value="101" />
							</param>
						</constructor>

					</register>
				</types>
			</container>

			<container name="injectNamed">
				<types>
					<register type="MockDatabase">

						<constructor>
							<param name="connectionString" >
								<value value="contoso" />
							</param>
						</constructor>

					</register>

					<register type="MockDatabase" name="Northwind">

						<constructor>
							<param name="connectionString" >
								<value value="Northwind" />
							</param>
						</constructor>

					</register>
				</types>
			</container>
			<container name="oneParameterConstructor">

				<register type="MockDatabase">
					<constructor>
						<param name="connectionString">
							<value value="Northwind" />
						</param>

					</constructor>

				</register>

			</container>

			<container name="stringIntConstructor">
				<types>
					<register type="MockDatabase">

						<constructor>
							<param name="connectionString">
								<value value="Northwind" />
							</param>
							<param name="testValue">
								<value value="101" />
							</param>

						</constructor>

					</register>
				</types>
			</container>

			<container name="oneDependencyParameterConstructor">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="DependentConstructor">

						<constructor>
							<param name="logger">
								<dependency name="special"/>
							</param>
						</constructor>

					</register>
				</types>
			</container>

			<container name="oneDependencyParameterConstructorForNamedInstance">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="DependentConstructor" name="MyInstance">

						<constructor>
							<param name="logger">
								<dependency name="special" type="ILogger"/>
							</param>
						</constructor>

					</register>
				</types>
			</container>


			<container name="twoConstructorParameters">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="TwoConstructorArgs">

						<constructor>
							<param name="connectionString" >
								<value value="AdventureWorks"/>
							</param>
							<param name="logger">
								<dependency type="ILogger"/>
							</param>
						</constructor>

					</register>
				</types>
			</container>
			<container name="twoSameDependencyConstructorParameters">
				<types>
					<register type="ILogger" mapTo="MockLogger" name="ordinary"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="TwoConstructorArgs">

						<constructor>
							<param name="logger1">
								<dependency name="ordinary" />
							</param>
							<param name="logger2">
								<dependency name="special" />
							</param>
						</constructor>

					</register>
				</types>
			</container>

			<container name="ObjectWithInjectionMethodContainer">
				<types>
					<register type="ILogger" mapTo="MockLogger" name="ordinary"/>
					<register type="IService" mapTo="EmailService" name="EmailServ"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="ObjectWithInjectionMethod">

						<property name="Service">
							<dependency name="EmailServ" />
						</property>
						<method name="Initialize">
							<param name="connectionString" >
								<value value="contoso"/>
							</param>
							<param name="service">
								<dependency name="EmailServ" />
							</param>
						</method>

					</register>
				</types>
			</container>
			

			<container name="twoDifferentDependentConstructorParameters">
				<types>
					<register type="IService" mapTo="EmailService" name="ordinary"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="TwoConstructorArgs">

						<constructor>
							<param name="service">
								<dependency name="ordinary" />
							</param>
							<param name="logger">
								<dependency name="special" />
							</param>
						</constructor>

					</register>
				</types>
			</container>
			<container name="injectionProperty">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="PropertyConstructor">

						<property name="Logger"  />

					</register>
				</types>
			</container>

			<container name="OneIntProperty">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="PropertyConstructor">

						<property name="Age">
							<value value="101"/>
						</property>

					</register>

				</types>
				</container>
			      <container name="multipleProperties">
				<types>
					<register type="ILogger" mapTo="MockLogger" />
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="Unity.Tests.TestObjects.ObjectWithTwoProperties, Unity.Tests">
			
							<property name="Obj1">
								<dependency type="ILogger" name="special" />
							</property>
							<property name="Obj2">
								<value value="Hello" typeConverter="StringConverter" />
							</property>
			
					</register>
					</types>
					</container>
			<container name="TwoProperties">
				<types>
					<register type="ILogger" mapTo="MockLogger" name="ordinary"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="Unity.Tests.TestObjects.ObjectWithTwoProperties, Unity.Tests">

						<property name="Obj1">
							<dependency type="ILogger" name="special" />
						</property>
						<property name="Obj2">
							<dependency type="ILogger" name="ordinary" />
						</property>

					</register>
				</types>
			</container>
			<container name="method">
				<types>
					<register type="ILogger" mapTo="MockLogger" />

					<register type="Unity.Tests.TestObjects.ObjectWithInjectionMethod, Unity.Tests">



						<method name="Initialize">
							<param name="connectionString">
								<value value="contoso"/>
							</param>
							<param name="logger">
								<dependency type="ILogger"/>
							</param>
						</method>

					</register>

				</types>

			</container>
			<container name="methodwithTwoSameInjectionParameters">
				<types>
					<register type="ILogger" mapTo="MockLogger" name="ordinary"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="Unity.Tests.TestObjects.ObjectWithInjectionMethod, Unity.Tests">

						<method name="Initialize">
							<param name="logger1">
								<dependency name="ordinary"/>
							</param>
							<param name="logger2">
								<dependency name="special"/>
							</param>
						</method>

					</register>
				</types>
			</container>
			<container name="methodwithTwoDifferentInjectionParameters">
				<types>
					<register type="IService" mapTo="EmailService" name="ordinary"/>
					<register type="ILogger" mapTo="SpecialLogger" name="special" />
					<register type="Unity.Tests.TestObjects.ObjectWithInjectionMethod, Unity.Tests">

						<method name="Initialize">
							<param name="service">
								<dependency name="ordinary"/>
							</param>
							<param name="logger">
								<dependency name="special"/>
							</param>
						</method>

					</register>
				</types>
			</container>


		</containers>

	</unity>

</configuration>
